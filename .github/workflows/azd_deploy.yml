name: "ðŸš€ Deploy to Azure using AZD ðŸ’ª"

# Run when commits are pushed to main
on:
  workflow_dispatch:
    inputs:
        action:
            description: 'Action to perform'
            required: false
            default: 'all'
            type: choice
            options:
                - all
                - provision
                - deploy
                - destroy
        run_evals:
            description: 'Run evals'
            required: false
            default: 'false'
            type: choice
            options:
                - true
                - false
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main
    paths:
      - '.github/workflows/azd_deploy.yml'
      - 'src'
      - 'app'
      - 'infra'

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
  RUN_EVALS: ${{ github.event.inputs.run_evals || 'false' }}

jobs:
  provision:
    environment: prod
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Disabling due to embedded sudo cmdlet.
      #  Relying on the self-hosted runner to have azd installed
      # - name: Install azd
      #   uses: Azure/setup-azd@ae0f8b5482eeac61e940f447327d84c73beb8b1e
      - name: Azure CLI Login
        # Uses azure/login@v2.2
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Log in with Azure Developer CLI (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Destroy Azure resources
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          azd down --force --no-prompt --purge
        shell: pwsh
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}

      - name: Provision Infrastructure
        if: ${{ github.event.inputs.action != 'destroy' }}
        id: provision
        run: |
          azd provision --no-prompt
        shell: pwsh
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
          ENABLE_EASY_AUTH: false

      - name: Setup Conda ðŸ”§
        uses: conda-incubator/setup-miniconda@v2
        if: ${{ env.RUN_EVALS == 'true' }}
        with:
          environment-file: environment.yaml # Create an environment.yml file
          activate-environment: 'pa-ai-env'
          python-version: '3.10'
          auto-activate-base: false

      - name: Deploy Application
        if: ${{ github.event.inputs.action != 'destroy' }}
        run: |
          azd deploy --no-prompt
        shell: pwsh
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
          RUN_EVALS: ${{ env.RUN_EVALS}}
